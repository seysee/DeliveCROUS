/**
 * AuthContext - Gestion de l'authentification utilisateur
 *
 * Ce fichier contient un contexte d'authentification (`AuthContext`) permettant de gÃ©rer l'authentification
 * de l'utilisateur Ã  travers des fonctionnalitÃ©s de connexion et de dÃ©connexion, tout en stockant de maniÃ¨re persistante
 * les informations de l'utilisateur dans `AsyncStorage`.
 *
 * **FonctionnalitÃ©s principales :**
 * 1. **Connexion (signIn)** : Permet Ã  l'utilisateur de se connecter en fournissant un email et un mot de passe.
 * 2. **DÃ©connexion (signOut)** : Permet Ã  l'utilisateur de se dÃ©connecter, supprimant ainsi les informations de l'utilisateur du contexte et du stockage.
 * 3. **Persistante de l'utilisateur connectÃ©** : Lors du lancement de l'application, si des informations d'utilisateur sont prÃ©sentes dans `AsyncStorage`, elles sont chargÃ©es et l'utilisateur est automatiquement connectÃ©.
 *
 * **Composants clÃ©s :**
 * - `AuthContext` : Contexte React qui fournit l'Ã©tat de l'utilisateur ainsi que les fonctions `signIn` et `signOut` Ã  travers l'application.
 * - `useAuth` : Hook personnalisÃ© permettant d'accÃ©der facilement Ã  l'authentification dans n'importe quel composant enfant de `AuthProvider`.
 * - `AuthProvider` : Composant fournisseur du contexte d'authentification qui enveloppe l'application et rend l'Ã©tat de l'utilisateur accessible via le contexte.
 *
 * **Structure de donnÃ©es :**
 * - L'objet `user` contient les informations personnelles de l'utilisateur (id, email, nom, prÃ©nom, photo).
 *
 * **Flux de donnÃ©es :**
 * - Lors de la connexion (`signIn`), les informations de l'utilisateur sont rÃ©cupÃ©rÃ©es Ã  partir de l'API via le service `login`. Ces informations sont ensuite stockÃ©es dans le contexte et dans `AsyncStorage` pour la persistance.
 * - Lors de la dÃ©connexion (`signOut`), l'Ã©tat de l'utilisateur est rÃ©initialisÃ© et les informations de l'utilisateur sont supprimÃ©es de `AsyncStorage`.
 *
 * **Exemple d'utilisation :**
 * ```javascript
 * const { user, signIn, signOut } = useAuth();
 *
 * signIn("email@example.com", "password123");
 *
 * // Pour se dÃ©connecter
 * signOut();
 * ```
 *
 * **DÃ©pendances :**
 * - `AsyncStorage` : UtilisÃ© pour stocker et rÃ©cupÃ©rer de maniÃ¨re persistante les informations de l'utilisateur sur le pÃ©riphÃ©rique.
 * - `login` (service API) : Fonction d'API permettant de rÃ©cupÃ©rer les donnÃ©es de l'utilisateur en fonction des informations de connexion fournies.
 *
 * **Interfaces :**
 * - `User` : ReprÃ©sente les informations d'un utilisateur authentifiÃ©.
 * - `AuthContextType` : Type du contexte d'authentification, dÃ©finissant les propriÃ©tÃ©s `user`, `signIn` et `signOut`.
 *
 * **Hooks :**
 * - `useAuth` : Hook personnalisÃ© permettant de consommer le `AuthContext` dans n'importe quel composant enfant.
 *
 */
import React, { createContext, useState, useEffect, useContext, ReactNode } from "react";
import { login } from "../services/api";
import AsyncStorage from "@react-native-async-storage/async-storage";

interface User {
    id: string;
    email: string;
    nom: string;
    prenom: string;
    photo?: string | null;
}

interface AuthContextType {
    user: User | null;
    signIn: (email: string, password: string) => Promise<void>;
    signOut: () => Promise<void>;
}


export const AuthContext = createContext<AuthContextType | null>(null);


export function useAuth() {
    return useContext(AuthContext);
}


export const AuthProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
    const [user, setUser] = useState<User | null>(null);

    useEffect(() => {
        const loadUser = async () => {
            const storedUser = await AsyncStorage.getItem("user");
            if (storedUser) {
                setUser(JSON.parse(storedUser));
            }
        };
        loadUser();
    }, []);

    const signIn = async (email: string, password: string) => {
        try {
            console.log("ðŸ”¹ Tentative de connexion avec :", email, password);
            const userData = await login(email, password);

            if (!userData) {
                throw new Error("Utilisateur non trouvÃ©");
            }

            console.log(" Utilisateur trouvÃ© :", userData);
            setUser(userData);
            await AsyncStorage.setItem("user", JSON.stringify(userData));
        } catch (error) {
            console.error(" Erreur d'authentification :", error);
            throw error;
        }
    };

    const signOut = async () => {
        setUser(null);
        await AsyncStorage.removeItem("user");
    };

    return (
        <AuthContext.Provider value={{ user, signIn, signOut }}>
            {children}
        </AuthContext.Provider>
    );
};


export { AuthContext, useAuth };