/**
 * Gestion des appels API pour la connexion utilisateur et la mise √† jour des informations.
 *
 * Ce fichier contient des fonctions permettant de :
 * 1. Se connecter en v√©rifiant l'email et le mot de passe de l'utilisateur.
 * 2. Mettre √† jour les informations d'un utilisateur existant.
 * 3. R√©cup√©rer une liste d'articles depuis une API externe.
 *
 * **Fonctions :**
 *
 * 1. **login** (email: string, password: string) : `Promise<User>`
 *    - Cette fonction envoie une requ√™te `GET` √† l'API pour r√©cup√©rer la liste des utilisateurs et rechercher un utilisateur correspondant √† l'email et au mot de passe fournis.
 *    - Si un utilisateur est trouv√©, il est retourn√©. Si aucune correspondance n'est trouv√©e, une erreur est lanc√©e.
 *    - La fonction retourne un objet utilisateur ou une erreur si la connexion √©choue.
 *
 * 2. **updateUser** (id: string, updatedData: object) : `Promise<User>`
 *    - Cette fonction envoie une requ√™te `PATCH` √† l'API pour mettre √† jour les informations d'un utilisateur en fonction de son `id` et des nouvelles donn√©es (`updatedData`) fournies.
 *    - Si la mise √† jour √©choue, une erreur est lanc√©e. Si elle r√©ussit, les donn√©es de l'utilisateur mises √† jour sont retourn√©es.
 *
 * 3. **fetchItems** () : `Promise<Item[]>`
 *    - Cette fonction envoie une requ√™te `GET` √† une autre API pour r√©cup√©rer une liste d'articles.
 *    - Si la r√©cup√©ration r√©ussit, elle retourne les donn√©es des articles sous forme de tableau. Si une erreur se produit, un tableau vide est retourn√©.
 *
 * **D√©tails de l'impl√©mentation :**
 * - `API_URL` : URL de base de l'API pour l'authentification utilisateur, utilis√©e dans la fonction `login` et `updateUser`.
 * - L'API des utilisateurs est suppos√©e √™tre disponible √† l'adresse `http://localhost:5000/users`.
 * - La r√©cup√©ration des articles se fait via l'API situ√©e √† `http://localhost:3000/items`.
 *
 * **Gestion des erreurs :**
 * - Dans chaque fonction, des blocs `try/catch` sont utilis√©s pour capturer les erreurs potentielles lors des appels `fetch`. Si une erreur survient (par exemple, si l'API est inaccessible ou que les donn√©es sont incorrectes), celle-ci est logu√©e dans la console et une erreur est lanc√©e.
 * - Les erreurs incluent des messages descriptifs, tels que "Erreur serveur", "Email ou mot de passe incorrect", et "Erreur lors de la r√©cup√©ration des donn√©es".
 *
 * **Exemples d'utilisation :**
 * 1. Connexion d'un utilisateur :
 *    ```javascript
 *    const user = await login('email@example.com', 'password123');
 *    console.log('Utilisateur connect√© :', user);
 *    ```
 * 2. Mise √† jour des informations d'un utilisateur :
 *    ```javascript
 *    const updatedUser = await updateUser(user.id, { name: 'Nouvel Nom' });
 *    console.log('Utilisateur mis √† jour :', updatedUser);
 *    ```
 * 3. R√©cup√©ration des articles :
 *    ```javascript
 *    const items = await fetchItems();
 *    console.log('Articles r√©cup√©r√©s :', items);
 *    ```
 *
 * **D√©pendances :**
 * - `fetch` : Fonction native permettant d'effectuer des requ√™tes HTTP vers les API.
 *
 * **Retour des fonctions :**
 * - La fonction `login` retourne un objet utilisateur si la connexion est r√©ussie, ou lance une erreur si l'authentification √©choue.
 * - La fonction `updateUser` retourne l'utilisateur mis √† jour si la mise √† jour est r√©ussie, ou lance une erreur en cas d'√©chec.
 * - La fonction `fetchItems` retourne un tableau d'articles ou un tableau vide en cas d'erreur.
 */

const API_URL = "http://localhost:5000";

export const login = async (email: string, password: string) => {
    console.log("üì° Envoi de la requ√™te au serveur...");

    try {
        const response = await fetch(`${API_URL}/users`);
        console.log(" R√©ponse re√ßue :", response.status);

        if (!response.ok) {
            throw new Error(" Erreur serveur !");
        }

        const users = await response.json();
        console.log(" Utilisateurs r√©cup√©r√©s :", users);

        const user = users.find((u) => u.email === email && u.password === password);
        if (!user) {
            console.log(" Email ou mot de passe incorrect !");
            throw new Error("Email ou mot de passe incorrect");
        }

        console.log(" Utilisateur trouv√© :", user);
        return user;
    } catch (error) {
        console.error(" Erreur API :", error);
        throw error;
    }
};

export const updateUser = async (id, updatedData) => {
    try {
        const response = await fetch(`${API_URL}/users/${id}`, {
            method: "PATCH",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify(updatedData),
        });

        if (!response.ok) {
            throw new Error("Erreur lors de la mise √† jour des informations.");
        }

        const updatedUser = await response.json();
        return updatedUser;
    } catch (error) {
        console.error(" Erreur API updateUser :", error);
        throw error;
    }
};

export const fetchItems = async () => {
    try {
        const response = await fetch("http://localhost:3000/items");
        const data = await response.json();
        return data;
    } catch (error) {
        console.error("Erreur lors de la r√©cup√©ration des donn√©es :", error);
        return [];
    }
};
